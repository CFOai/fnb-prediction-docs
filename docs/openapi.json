{
    "openapi": "3.0.3",
    "info": {
        "title": "Astra API",
        "version": "0.0.1",
        "description": "The Overachieve API provides restaurant managers with a convenient way to get sales predictions. The endpoint mainly return predicted buffered sales.\n\nYou can retrieve predictions at 3 different levels of aggregation (for now): Menu Items, Categories, and Stores. We call these levels 'Resources', because each Resource has its own dedicated model. The Resources are defined as follows:\n\n- **Menu Item**: The most granular resource, representing an individual item on a restaurant's menu.\n\n- **Category**: Represents a group of menu items that fall under the same category (e.g., 'red wines', 'desserts', 'appetizers'). This resource provides a more generalized prediction than individual menu items. Each category is tied to a specific Store. So 'red wines' might be a common category across multiple stores, but we'll have 1 model per category per store.\n\n- **Store**: Represents a whole restaurant. Predictions at this level encompass all menu items within that restaurant.\n\nUsers can retrieve predictions at one of these 3 levels of granularity (for now)."
    },
    "servers": [
        {
            "url": "https://lib.cfo-ai.com/v1",
            "description": "Production server"
        }
    ],
    "components": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "<secret key>"
            }
        },
        "parameters": {
            "StartingAfter": {
                "name": "starting_after",
                "in": "query",
                "description": "A cursor for use in pagination. `starting_after` is the ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `646c39f586b0765ba0a4f0d6`, your subsequent call can include `starting_after=646c39f586b0765ba0a4f0d6` in order to fetch the next page of the list.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "EndingBefore": {
                "name": "ending_before",
                "in": "query",
                "description": "A cursor for use in pagination. `ending_before` is the ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `646c39f586b0765ba0a4f0d6`, your subsequent call can include `ending_before=646c39f586b0765ba0a4f0d6` in order to fetch the previous page of the list.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "Limit": {
                "name": "limit",
                "in": "query",
                "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items, and the default is 10 items.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 10
                }
            }
        },
        "schemas": {
            "Model": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "The unique identifier of the model.",
                        "example": "646c39c086b0765ba0a4f0d4"
                    },
                    "resource_type": {
                        "type": "string",
                        "description": "The level of aggregation that the model is trained on.",
                        "enum": [
                            "menu_item",
                            "category",
                            "store"
                        ],
                        "example": "store"
                    },
                    "resource_name": {
                        "type": "string",
                        "description": "The name for the resource, such as 'corona' (if it's a menu_item) or 'Red wines' (if it's a category).",
                        "example": "rev-gz"
                    },
                    "resource_id": {
                        "type": "string",
                        "description": "A unique id for the resource. For stores, it may be the store id.",
                        "example": "store_32353"
                    },
                    "store_name": {
                        "type": "string",
                        "description": "A unique identifier of the store for the resource. This can be used in conjunction with the resource_id to uniquely identify a resource across all stores.",
                        "example": "revolution-gz"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the model",
                        "enum": [
                            "trained",
                            "training",
                            "failed"
                        ],
                        "example": "trained"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time the model was created.",
                        "example": "2023-05-24T14:43:29.452783"
                    },
                    "output_type": {
                        "type": "string",
                        "description": "The output type of the model.",
                        "enum": [
                            "revenue",
                            "unit"
                        ],
                        "example": "revenue"
                    },
                    "location": {
                        "type": "object",
                        "description": "The location of the store. This info is used to retrieve weather and holiday data",
                        "properties": {
                            "city": {
                                "type": "string",
                                "description": "The city where the store is located.",
                                "example": "guangzhou"
                            },
                            "country": {
                                "type": "string",
                                "description": "The country where the store is located.",
                                "example": "CN"
                            }
                        }
                    },
                    "performance": {
                        "type": "object",
                        "description": "Details about the performance of the model.",
                        "properties": {
                            "RMSE": {
                                "type": "number",
                                "format": "double",
                                "description": "The root mean square error of the model.",
                                "example": 269.26160435485207
                            },
                            "train_time": {
                                "type": "number",
                                "format": "double",
                                "description": "The time it took to train the model in seconds.",
                                "example": 1.2798290252685547
                            }
                        }
                    }
                }
            },
            "Prediction": {
                "type": "object",
                "properties": {
                    "model": {
                        "$ref": "#/components/schemas/Model"
                    },
                    "predictions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "The date of the sales prediction.",
                                    "example": "2023-05-24"
                                },
                                "predicted_avg_sales": {
                                    "type": "number",
                                    "description": "The historical average sales for the menu item. If `model.output_type` is 'units', this will be the average units sold. If `model.output_type` is 'revenue', this will be the average revenue in the store's local currency.",
                                    "example": 23
                                },
                                "buffered_prediction": {
                                    "type": "number",
                                    "description": "The predicted sales for the menu item with the designated buffer amount added. If `model.output_type` is 'units', this will be the buffered prediction in units. If `model.output_type` is 'revenue', this will be the buffered prediction in the store's local currency.",
                                    "example": 29
                                },
                                "confidence": {
                                    "type": "number",
                                    "description": "The confidence level of the sales prediction.",
                                    "example": 0.95
                                },
                                "manual_adjustment": {
                                    "type": "number",
                                    "description": "Any manual adjustment, if provided, included in the predicted_sales figure. This will be in 'units' if `model.output_type` is 'units', and in the store's local currency if `model.output_type` is 'revenue'.",
                                    "example": 3
                                },
                                "weather": {
                                    "type": "object",
                                    "description": "The weather data for the day of the sales prediction.",
                                    "properties": {
                                        "temperature": {
                                            "type": "number",
                                            "description": "The temperature for the day of the sales prediction in Celsius.",
                                            "example": "23"
                                        },
                                        "weather_description": {
                                            "type": "string",
                                            "description": "The weather description for the day of the sales prediction.",
                                            "example": "Partly cloudy"
                                        },
                                        "location": {
                                            "type": "string",
                                            "description": "The location for the weather data.",
                                            "example": "Shanghai, CN"
                                        }
                                    }
                                },
                                "holiday": {
                                    "type": "object",
                                    "description": "Info about any holidays on this predicted day",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of holiday",
                                            "example": "Spring Festival Day 2"
                                        },
                                        "date": {
                                            "type": "string",
                                            "description": "Date of holiday",
                                            "example": "2023-01-31"
                                        },
                                        "location": {
                                            "type": "string",
                                            "description": "Location of holiday",
                                            "example": "Shanghai, CN"
                                        }
                                    }
                                }
                            },
                            "description": "An array of sales predictions for the next x days. X is the # of days specified in the forecast_days query parameter."
                        }
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "description": "Error code"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    }
                }
            }
        }
    },
    "paths": {
        "/prediction/{_id}": {
            "get": {
                "summary": "Retrieve a prediction for a resource",
                "description": "Provides the predicted sales for the given resource (menu item, category, store, etc.).",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "The id for the model for which we want to make the predictions from. This will come in the form of ObjectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "646c39f586b0765ba0a4f0d6"
                        }
                    },
                    {
                        "name": "forecast_days",
                        "in": "query",
                        "description": "The number of days for the sales forecast. The max is 7, based on limit of Weather API forecasts.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 7,
                            "minimum": 1,
                            "maximum": 7
                        }
                    },
                    {
                        "name": "major_events (placeholder)",
                        "in": "query",
                        "description": "An array of dates representing major events that are expected to positively affect sales. The models already include public holidays in their training, so this array should include major events that are not yet captured. By including a date, we will flag that date as a major event and the prediction will be adjusted accordingly. Default is an empty array if not provided.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date"
                            },
                            "default": []
                        }
                    },
                    {
                        "name": "manual_adjustment",
                        "in": "query",
                        "description": "A URL-safe string that represents a JSON array of objects. Each object represents a manual adjustment and should contain 'date' and 'amount' keys. The 'date' key should correspond to a string that represents a date in the 'YYYY-MM-DD' format. The 'amount' key should correspond to a number, representing the amount to adjust the sales prediction for the specified date. The amount will follow the unit specified under the models' `output_type`. This parameter is typically used when the user has scheduled catering, reservations with large groups, or other known sales-increasing events. To use this parameter, create your array of adjustment objects, convert it to a JSON string using a method like JSON.stringify in JavaScript, then encode the string to make it URL-safe.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "date": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "The date of the manual adjustment. Should be in 'YYYY-MM-DD' format."
                                    },
                                    "amount": {
                                        "type": "number",
                                        "description": "The amount to adjust the sales prediction for the specified date, given in the unit specified under the model's `output_type`."
                                    }
                                },
                                "required": [
                                    "date",
                                    "amount"
                                ]
                            }
                        },
                        "example": "%5B%7B%22date%22%3A%222023-07-04%22%2C%22amount%22%3A500%7D%2C%7B%22date%22%3A%222023-07-05%22%2C%22amount%22%3A600%7D%5D"
                    },
                    {
                        "name": "current_price (placeholder)",
                        "in": "query",
                        "description": "Optional, if forecast_type is 'revenue'. The current price of the menu item. Discarded if forecast_type is 'units'. By default, the last known price will be used.",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales prediction data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prediction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 400,
                                    "message": "Invalid request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 404,
                                    "message": "Model not found with _id 646c39c086b0765ba0a4f0d4"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 500,
                                    "message": "Server could not process your request"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "summary": "Upload new data (placeholder)",
                "description": "Upload new historical data to add onto the training data for a predition model. NOTE: This endpoint is currently on hold and not yet implemented. We are still considering the implementation of this feature. Stay tuned for updates.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The CSV file containing historical transaction data. File must include the following columns: menu_item_id, quantity, time of purchase, # of people served in the ticket."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "A success message indicating that the file was uploaded and processed."
                                        },
                                        "records_imported": {
                                            "type": "integer",
                                            "description": "The number of transaction records imported from the uploaded file."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 400,
                                    "message": "Invalid request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 404,
                                    "message": "Model not found with _id 646c39c086b0765ba0a4f0d4"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 500,
                                    "message": "Server could not process your request"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/models": {
            "get": {
                "summary": "List all models",
                "description": "Returns a list of trained models. A model is built for every resource (menu item, category, store, etc). Models are trained on previously provided sales data, and also include external data sources such as weather data and public holidays. ",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "A partial name of the model to search for. This parameter supports approximate matching.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "chicken"
                        }
                    },
                    {
                        "name": "created_after",
                        "in": "query",
                        "description": "Unix timestamp to filter list of models created after the timestamp.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1640995200
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The types of models to return. Accepts a list of options: 'menu_item', 'category', or 'store'. To specify multiple values, repeat the parameter with each value. For example, `/models/?type=menu_item&type=category`",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "menu_item",
                                    "category",
                                    "store"
                                ],
                                "example": [
                                    "category",
                                    "store"
                                ]
                            }
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The status of models to return.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "trained",
                                "training",
                                "failed"
                            ],
                            "default": "trained",
                            "example": "trained"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/StartingAfter"
                    },
                    {
                        "$ref": "#/components/parameters/EndingBefore"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Parameter to sort the returned models by. Can be either 'created_at' for sorting by model creation date, or 'performance' for sorting by model performance based on RMSE score. For performance, the lower the score the better, so set parameter `sort_order` to 'asc' to sort by best performing models first. Default is 'performance'.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "performance"
                            ],
                            "default": "performance",
                            "example": "performance"
                        }
                    },
                    {
                        "name": "sort_order",
                        "in": "query",
                        "description": "Determines the order of the sorted models. Can be either 'asc' for ascending order or 'desc' for descending order. Default is 'asc'.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc",
                            "example": "desc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Model"
                                            }
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "description": "If false, there are no more pages to load."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 400,
                                    "message": "Invalid request"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 500,
                                    "message": "Server could not process your request"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/models/{id}": {
            "get": {
                "summary": "Retreive a model",
                "description": "Retreives the details of a trained model. A model is built for every resource (menu item, category, store, etc). Models are trained on previously provided sales data, and also include external data sources such as weather data and public holidays. ",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "646c39f586b0765ba0a4f0d6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a model",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 400,
                                    "message": "Invalid request"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 404,
                                    "message": "Model not found with _id 646c39c086b0765ba0a4f0d4"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "code": 500,
                                    "message": "<Error message>"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount": {
            "get": {
                "summary": "Discount Endpoint (placeholder)",
                "description": "This is a placeholder for the future /discount route. More information will be provided once the route is fully implemented.",
                "responses": {
                    "200": {
                        "description": "Placeholder response"
                    }
                }
            }
        }
    }
}