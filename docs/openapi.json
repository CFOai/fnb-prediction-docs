{
    "openapi": "3.0.3",
    "info": {
        "title": "Astra API",
        "version": "0.0.1",
        "description": "The Overachieve API provides restaurant managers with a convenient way to get sales predictions. The endpoint mainly return predicted buffered sales.\n\nYou can retrieve predictions at 3 different levels of aggregation (for now): Menu Items, Categories, and Stores. We call these levels 'Resources', because each Resource has its own dedicated model. The Resources are defined as follows:\n\n- **Menu Item**: The most granular resource, representing an individual item on a restaurant's menu.\n\n- **Category**: Represents a group of menu items that fall under the same category (e.g., 'red wines', 'desserts', 'appetizers'). This resource provides a more generalized prediction than individual menu items. Each category is tied to a specific Store. So 'red wines' might be a common category across multiple stores, but we'll have 1 model per category per store.\n\n- **Store**: Represents a whole restaurant. Predictions at this level encompass all menu items within that restaurant.\n\nUsers can retrieve predictions at one of these 3 levels of granularity (for now)."
    },
    "components": {
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "ASTRA-API-KEY"
            }
        }
    },
    "paths": {
        "/v1/prediction": {
            "get": {
                "summary": "Get predictions for a resource",
                "description": "Provides the predicted sales for the given resource (menu item, category, store, etc.).",
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "model_id",
                        "in": "path",
                        "description": "The id for the model for which we want to make the predictions from.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "forecast_days",
                        "in": "query",
                        "description": "The number of days for the sales forecast. Default is 14 if not provided. Max is 14, mainly based on limit of Weather API forecasts",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 14
                        }
                    },
                    {
                        "name": "major_events",
                        "in": "query",
                        "description": "An array of dates representing major events that are expected to positively affect sales. The models already include public holidays in their training, so this array should include major events that are not yet captured. By including a date, we will flag that date as a major event and the prediction will be adjusted accordingly. Default is an empty array if not provided.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date"
                            },
                            "default": []
                        }
                    },
                    {
                        "name": "manual_adjustment",
                        "in": "query",
                        "description": "An array of objects containing dates and manual adjustment amounts for sales predictions, typically used when the user has scheduled catering, reservations with large groups, or other known sales-increasing events.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "date": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "The date of the manual adjustment."
                                    },
                                    "adjustment": {
                                        "type": "number",
                                        "description": "The amount to adjust the sales prediction for the specified date. Give it in unit sales"
                                    }
                                },
                                "required": [
                                    "date",
                                    "adjustment"
                                ],
                                "default": []
                            }
                        }
                    },
                    {
                        "name": "forecast_type",
                        "in": "query",
                        "description": "If the type of the model is 'menu_item', then you can determine whether the forecast should be in units or revenue. Models for 'category' or 'store' types only return revenue. Accepts 'units' or 'revenue'. Defaults to 'revenue'.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "units",
                                "revenue"
                            ],
                            "default": "revenue"
                        }
                    },
                    {
                        "name": "current_price",
                        "in": "query",
                        "description": "Optional, if forecast_type is 'revenue'. The current price of the menu item. Discarded if forecast_type is 'units'. By default, the last known price will be used.",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales prediction data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "menu_item_id": {
                                            "type": "string",
                                            "description": "The unique identifier of the menu item."
                                        },
                                        "menu_item_name": {
                                            "type": "string",
                                            "description": "The name of the menu item."
                                        },
                                        "predictions": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "predicted_sales": {
                                                        "type": "number",
                                                        "description": "The predicted sales for the menu item for a specific day."
                                                    },
                                                    "date": {
                                                        "type": "string",
                                                        "format": "date",
                                                        "description": "The date of the sales prediction."
                                                    },
                                                    "predicted_avg_sales": {
                                                        "type": "number",
                                                        "description": "The historical average sales for the menu item."
                                                    },
                                                    "buffered_target": {
                                                        "type": "number",
                                                        "description": "The predicted sales for the menu item with the designated buffer amount added."
                                                    },
                                                    "buffer_amount": {
                                                        "type": "number",
                                                        "description": "The buffer amount added to the predicted sales."
                                                    },
                                                    "confidence": {
                                                        "type": "number",
                                                        "description": "The confidence level of the sales prediction."
                                                    },
                                                    "manual_adjustment": {
                                                        "type": "number",
                                                        "description": "Any manual adjustment, if provided, included in the predicted_sales figure."
                                                    },
                                                    "weather": {
                                                        "type": "object",
                                                        "description": "The weather data for the day of the sales prediction.",
                                                        "properties": {
                                                            "temperature": {
                                                                "type": "number",
                                                                "description": "The temperature for the day of the sales prediction in Celsius."
                                                            },
                                                            "weather_description": {
                                                                "type": "string",
                                                                "description": "The weather description for the day of the sales prediction."
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "An array of sales predictions for the next x days. X is the # of days specified in the forecast_days query parameter."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/upload": {
            "post": {
                "summary": "Upload new data (placeholder)",
                "description": "Upload new historical data to add onto the training data for a predition model. NOTE: This endpoint is currently on hold and not yet implemented. We are still considering the implementation of this feature. Stay tuned for updates.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The CSV file containing historical transaction data. File must include the following columns: menu_item_id, quantity, time of purchase, # of people served in the ticket."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "A success message indicating that the file was uploaded and processed."
                                        },
                                        "records_imported": {
                                            "type": "integer",
                                            "description": "The number of transaction records imported from the uploaded file."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/models": {
            "get": {
                "summary": "List all models",
                "description": "Returns a list of trained models. A model is built for every resource (menu item, category, store, etc). Models are trained on previously provided sales data, and also include external data sources such as weather data and public holidays. ",
                "parameters": [
                    {
                        "name": "created_after",
                        "in": "query",
                        "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1640995200
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results to return. Range is between 1 and 100, default is 10.",
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model status data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "model_id": {
                                                "type": "string",
                                                "description": "The unique identifier of the model."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The level of aggregation that the model is trained on. Can return 'menu_item', 'category', or 'store' (for now)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "The name for the level of aggregation, such as 'Corona' (if it's a menu_item) or 'Red wines' (if it's a category)."
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "The status of the model. Will return 'ready', 'training', or 'failed'."
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date",
                                                "description": "The date the model was created."
                                            },
                                            "output_type": {
                                                "type": "string",
                                                "format": "string",
                                                "description": "The output type of the model. Will return 'revenue' or 'unit'."
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error_code": {
                                            "type": "integer",
                                            "description": "Error code representing the type of error that occurred."
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "A description of the error that occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/discount": {
            "get": {
                "summary": "Discount Endpoint (placeholder)",
                "description": "This is a placeholder for the future /discount route. More information will be provided once the route is fully implemented.",
                "responses": {
                    "200": {
                        "description": "Placeholder response"
                    }
                }
            }
        }
    }
}